# 系统能打开最大文件句柄与inode数量 O
fs.file-max = 65536

# 对于断开的连接, 使TCP保持在FIN-WAIT状态的时间(秒) O
net.ipv4.tcp_fin_timeout = 30

# 放弃建立连接之前发送SYN包的次数。 X
net.ipv4.tcp_syn_retries = 1

# TCP三次握手的syn/ack阶段的重试次数 X
net.ipv4.tcp_synack_retries = 1

# 在丢弃已建立的TCP连接之前的重试次数 X
net.ipv4.tcp_retries2 = 1

# TCP发送keepalive探测消息的间隔时间(秒), 用于确认TCP连接是否有效。 防止两边建立连接但不发送数据的攻击。 O
net.ipv4.tcp_keepalive_time = 600

# 启用MTU发现 O
net.ipv4.tcp_mtu_probing = 1

# 开启重用, 允许将TIME-WAIT sockets重新用于新的TCP连接 O
net.ipv4.tcp_tw_reuse = 1

# 系统同时保持TIME_WAIT套接字的最大数量 O
net.ipv4.tcp_max_tw_buckets = 16384

# 硬件接收数据包的速率比系统处理这些包的速率快时，允许送到队列的数据包的最大数目。 O
net.core.netdev_max_backlog = 16384

# 监听队列最大数据包的数量, 超过这个数量就会导致链接超时或者触发重传机制。nginx定义的NGX_LISTEN_BACKLOG默认为511。对繁忙的服务器,增加该值有助于网络性能 O
net.core.somaxconn = 8192

# SYN队列长度, 增加可以容纳更多等待连接的网络连接数。 O
net.ipv4.tcp_max_syn_backlog = 8192

# 启用有选择的应答。接收乱序报文来提高性能(这样可以让发送者只发送丢失的报文段)。对于广域网通信来说这个选项应该启用, 但是这会增加对 CPU 的占用。 X
net.ipv4.tcp_sack = 1

# Google研究发现TCP三次握手是页面延迟时间的重要原因。 TCP fast open 允许服务器和客户端在连接建立握手阶段交换数据,从而使应用节省了一个RTT的时延。 O
net.ipv4.tcp_fastopen = 3

# 开启TCP时间戳 以一种比重发超时更精确的方法（请参阅 RFC 1323）来启用对 RTT 的计算；为了实现更好的性能应该启用这个选项。 X
net.ipv4.tcp_timestamps = 1

# 每个套接字所允许的最大缓冲区的大小 X
net.core.optmem_max = 20480

# 系统为网络读写缓冲区预留的内存大小 O
net.core.rmem_default = 1048576
net.core.rmem_max = 1048576
net.core.wmem_default = 1048576
net.core.wmem_max = 1048576

# 为ipv4连接分配读写缓冲区内存大小, 单位是Byte。
# 第一个数字为最小值, 第二个数字为默认值, 第三个数字为最大值 
net.ipv4.tcp_wmem = 8192 131072 16777216
net.ipv4.tcp_rmem = 32768 131072 16777216

#系统对最大跟踪的TCP连接数的限制 X
net.ipv4.netfilter.ip_conntrack_max = 204800

# 关闭tcp的连接传输的慢启动。默认先休止一段时间，再初始化拥塞窗口。 X
net.ipv4.tcp_slow_start_after_idle = 0

# 开启SYN Cookies, 当出现SYN等待队列溢出时启用cookies来处理, 可防范SYN攻击 O
net.ipv4.tcp_syncookies = 1

# 避免放大攻击 O
net.ipv4.icmp_echo_ignore_broadcasts = 1

# 开启恶意icmp错误消息保护 O
net.ipv4.icmp_ignore_bogus_error_responses = 1

#防止不正确的udp包的攻击 X
net.inet.udp.checksum = 1


